(()=>{"use strict";var t,e;(e=t||(t={})).ADD_TASK="ADD_TASK",e.DELETE_TASK="DELETE_TASK",e.MARK_AS_COMPLETED="MARK_AS_COMPLETED";let s=(t=>{const e=localStorage.getItem(t)||sessionStorage.getItem(t);return e?JSON.parse(e):{screen:"DASHBOARD",tasks:[],completedTask:!1}})("STORE"),n=[];const o=e=>{const o=((e,s)=>{const{action:n,payload:o}=e;switch(n){case t.ADD_TASK:return Object.assign(Object.assign({},s),{cart:[...s.cart,o]});case t.DELETE_TASK:const e=s.task.filter((t=>t.uid!==o));return Object.assign(Object.assign({},s),{cart:e});case t.MARK_AS_COMPLETED:return Object.assign(Object.assign({},s),{tasks:s.tasks.map((t=>t.id===o?Object.assign(Object.assign({},t),{completed:!t.completed}):t))})}})(e,JSON.parse(JSON.stringify(s)));s=o,((t,e,s=!1)=>{const n=s?sessionStorage:localStorage,o=JSON.stringify(e);n.setItem(t,o)})("STORE",o),n.forEach((t=>t.render()))},i=t=>{n=[...n,t]};var a;!function(t){t.uid="uid",t.utitle="utitle",t.description="description"}(a||(a={}));class r extends HTMLElement{static get observedAttributes(){return Object.keys(a)}constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.render()}attributeChangedCallback(t,e,s){t===a.uid?this[t]=s?Number(s):void 0:this[t]=s,this.render()}render(){var e,s,n;if(!this.shadowRoot)return;this.shadowRoot.innerHTML='\n            <style>\n                form { display: flex; flex-direction: column; gap: 12px; }\n                input, button { padding: 10px; font-size: 1rem; }\n                button { background-color: #007BFF; color: white; border: none; cursor: pointer; }\n                button:hover { background-color: #0056b3; }\n            </style>\n            <form id="task-form">\n                <input type="text" id="title" name="title" placeholder="Title" required>\n                <input type="text" id="description" name="description" placeholder="Description" required>\n                <button type="submit" id="btn" >Add task</button>\n            </form>\n        ';const i=null===(e=this.shadowRoot)||void 0===e?void 0:e.querySelector("#title"),a=null===(s=this.shadowRoot)||void 0===s?void 0:s.querySelector("#description"),r=null===(n=this.shadowRoot)||void 0===n?void 0:n.querySelector("#btn");null==r||r.addEventListener("click",(e=>{e.preventDefault();const s=(null==i?void 0:i.value)||"",n=(null==a?void 0:a.value)||"";var r;i&&a?o((r={utitle:s,description:n},{action:t.ADD_TASK,payload:r})):console.log("mandar el titulo y la descripcion")}))}}customElements.define("task-form",r);class d extends HTMLElement{constructor(){super(),this.tasks=[],this.attachShadow({mode:"open"})}connectedCallback(){this.render(),s.subscribe((()=>this.updateTasks()))}updateTasks(){this.tasks=s.getState().tasks,this.render()}render(){if(!this.shadowRoot)return;this.shadowRoot.innerHTML='\n            <style>\n                .task-list {\n                    display: flex;\n                    flex-direction: column;\n                    gap: 10px;\n                }\n            </style>\n            <div class="task-list"></div>\n        ';const t=this.shadowRoot.querySelector(".task-list");t&&(t.innerHTML="",this.tasks.forEach((e=>{const s=document.createElement("task-item");s.setAttribute("uid",e.uid.toString()),s.setAttribute("utitle",e.utitle),s.setAttribute("description",e.description),t.appendChild(s)})))}}customElements.define("task-list",d);class c extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),i(this)}connectedCallback(){this.render()}render(){this.shadowRoot&&(this.shadowRoot.innerHTML="\n            <style>\n                .dashboard {\n                    display: flex;\n                    flex-direction: column;\n                    gap: 20px;\n                    padding: 20px;\n                    background-color: #f0f0f0;\n                    border-radius: 8px;\n                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n                    min-height: 100vh;\n                    align-items: center;\n                    justify-content: center;\n                }\n                task-form, task-list {\n                    max-width: 600px;\n                    width: 100%;\n                }\n                h1 {\n                    text-align: center;\n                    color: #333;\n                    font-family: 'Arial', sans-serif;\n                }\n            </style>\n            <div class=\"dashboard\">\n                <h1>Task list</h1>\n                <task-form></task-form> \x3c!-- Formulario para agregar nuevas tareas --\x3e\n                <task-list></task-list> \x3c!-- Lista de tareas actuales --\x3e\n            </div>\n        ")}}customElements.define("app-dashboard",c);class l extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),i(this)}connectedCallback(){this.render(),console.log("appSate")}render(){var t;if(this.shadowRoot&&(this.shadowRoot.innerHTML=""),"DASHBOARD"===s.screen){const e=document.createElement("app-dashboard");null===(t=this.shadowRoot)||void 0===t||t.appendChild(e)}else console.log("Not found");console.log(s.screen)}}customElements.define("app-container",l)})();